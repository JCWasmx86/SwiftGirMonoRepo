import CGLib
import CHarfBuzz
import GLib
import GLibObject
/// The selectors defined for specifying AAT feature settings.
public typealias aat_layout_feature_selector_t = hb_aat_layout_feature_selector_t


public extension aat_layout_feature_selector_t {
    /// Cast constructor, converting any binary integer to a
    /// `aat_layout_feature_selector_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castToaat_layout_feature_selector_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castToaat_layout_feature_selector_tInt(raw))
    }
    /// Initial, unset feature selector
    static let invalid = HB_AAT_LAYOUT_FEATURE_SELECTOR_INVALID // 65535

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC`
    static let allTypeFeaturesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_TYPE_FEATURES_ON // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC`
    static let allTypeFeaturesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_TYPE_FEATURES_OFF // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let requiredLigaturesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_REQUIRED_LIGATURES_ON // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let requiredLigaturesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_REQUIRED_LIGATURES_OFF // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let commonLigaturesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_ON // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let commonLigaturesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_COMMON_LIGATURES_OFF // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let rareLigaturesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_ON // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let rareLigaturesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_RARE_LIGATURES_OFF // 5

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let logosOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_LOGOS_ON // 6

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let logosOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_LOGOS_OFF // 7

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let rebusPicturesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_REBUS_PICTURES_ON // 8

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let rebusPicturesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_REBUS_PICTURES_OFF // 9

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let diphthongLigaturesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_DIPHTHONG_LIGATURES_ON // 10

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let diphthongLigaturesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_DIPHTHONG_LIGATURES_OFF // 11

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let squaredLigaturesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_SQUARED_LIGATURES_ON // 12

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let squaredLigaturesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_SQUARED_LIGATURES_OFF // 13

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let abbrevSquaredLigaturesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_ABBREV_SQUARED_LIGATURES_ON // 14

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let abbrevSquaredLigaturesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_ABBREV_SQUARED_LIGATURES_OFF // 15

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let symbolLigaturesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_SYMBOL_LIGATURES_ON // 16

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let symbolLigaturesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_SYMBOL_LIGATURES_OFF // 17

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let contextualLigaturesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_ON // 18

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let contextualLigaturesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_LIGATURES_OFF // 19

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let historicalLigaturesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_ON // 20

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let historicalLigaturesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_HISTORICAL_LIGATURES_OFF // 21

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let unconnected = HB_AAT_LAYOUT_FEATURE_SELECTOR_UNCONNECTED // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let partiallyConnected = HB_AAT_LAYOUT_FEATURE_SELECTOR_PARTIALLY_CONNECTED // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES`
    static let cursive = HB_AAT_LAYOUT_FEATURE_SELECTOR_CURSIVE // 2

    /// Deprecated
    static let upperAndLowerCase = HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_AND_LOWER_CASE // 0

    /// Deprecated
    static let allCaps = HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_CAPS // 1

    /// Deprecated
    static let allLowerCase = HB_AAT_LAYOUT_FEATURE_SELECTOR_ALL_LOWER_CASE // 2

    /// Deprecated
    static let smallCaps = HB_AAT_LAYOUT_FEATURE_SELECTOR_SMALL_CAPS // 3

    /// Deprecated
    static let initialCaps = HB_AAT_LAYOUT_FEATURE_SELECTOR_INITIAL_CAPS // 4

    /// Deprecated
    static let initialCapsAndSmallCaps = HB_AAT_LAYOUT_FEATURE_SELECTOR_INITIAL_CAPS_AND_SMALL_CAPS // 5

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION`
    static let substituteVerticalFormsOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_ON // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION`
    static let substituteVerticalFormsOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_SUBSTITUTE_VERTICAL_FORMS_OFF // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT`
    static let linguisticRearrangementOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_LINGUISTIC_REARRANGEMENT_ON // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT`
    static let linguisticRearrangementOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_LINGUISTIC_REARRANGEMENT_OFF // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING`
    static let monospacedNumbers = HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_NUMBERS // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING`
    static let proportionalNumbers = HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_NUMBERS // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING`
    static let thirdWidthNumbers = HB_AAT_LAYOUT_FEATURE_SELECTOR_THIRD_WIDTH_NUMBERS // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING`
    static let quarterWidthNumbers = HB_AAT_LAYOUT_FEATURE_SELECTOR_QUARTER_WIDTH_NUMBERS // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE`
    static let wordInitialSwashesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_INITIAL_SWASHES_ON // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE`
    static let wordInitialSwashesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_INITIAL_SWASHES_OFF // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE`
    static let wordFinalSwashesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_FINAL_SWASHES_ON // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE`
    static let wordFinalSwashesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_WORD_FINAL_SWASHES_OFF // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE`
    static let lineInitialSwashesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_INITIAL_SWASHES_ON // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE`
    static let lineInitialSwashesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_INITIAL_SWASHES_OFF // 5

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE`
    static let lineFinalSwashesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_FINAL_SWASHES_ON // 6

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE`
    static let lineFinalSwashesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_LINE_FINAL_SWASHES_OFF // 7

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE`
    static let nonFinalSwashesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_NON_FINAL_SWASHES_ON // 8

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE`
    static let nonFinalSwashesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_NON_FINAL_SWASHES_OFF // 9

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE`
    static let showDiacritics = HB_AAT_LAYOUT_FEATURE_SELECTOR_SHOW_DIACRITICS // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE`
    static let hideDiacritics = HB_AAT_LAYOUT_FEATURE_SELECTOR_HIDE_DIACRITICS // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE`
    static let decomposeDiacritics = HB_AAT_LAYOUT_FEATURE_SELECTOR_DECOMPOSE_DIACRITICS // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION`
    static let normalPosition = HB_AAT_LAYOUT_FEATURE_SELECTOR_NORMAL_POSITION // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION`
    static let superiors = HB_AAT_LAYOUT_FEATURE_SELECTOR_SUPERIORS // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION`
    static let inferiors = HB_AAT_LAYOUT_FEATURE_SELECTOR_INFERIORS // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION`
    static let ordinals = HB_AAT_LAYOUT_FEATURE_SELECTOR_ORDINALS // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION`
    static let scientificInferiors = HB_AAT_LAYOUT_FEATURE_SELECTOR_SCIENTIFIC_INFERIORS // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS`
    static let noFractions = HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_FRACTIONS // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS`
    static let verticalFractions = HB_AAT_LAYOUT_FEATURE_SELECTOR_VERTICAL_FRACTIONS // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS`
    static let diagonalFractions = HB_AAT_LAYOUT_FEATURE_SELECTOR_DIAGONAL_FRACTIONS // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE`
    static let preventOverlapOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_PREVENT_OVERLAP_ON // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE`
    static let preventOverlapOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_PREVENT_OVERLAP_OFF // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS`
    static let hyphensToEmDashOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHENS_TO_EM_DASH_ON // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS`
    static let hyphensToEmDashOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHENS_TO_EM_DASH_OFF // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS`
    static let hyphenToEnDashOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_EN_DASH_ON // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS`
    static let hyphenToEnDashOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_EN_DASH_OFF // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS`
    static let slashedZeroOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_ON // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS`
    static let slashedZeroOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASHED_ZERO_OFF // 5

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS`
    static let formInterrobangOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_FORM_INTERROBANG_ON // 6

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS`
    static let formInterrobangOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_FORM_INTERROBANG_OFF // 7

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS`
    static let smartQuotesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_SMART_QUOTES_ON // 8

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS`
    static let smartQuotesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_SMART_QUOTES_OFF // 9

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS`
    static let periodsToEllipsisOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIODS_TO_ELLIPSIS_ON // 10

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS`
    static let periodsToEllipsisOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIODS_TO_ELLIPSIS_OFF // 11

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS`
    static let hyphenToMinusOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_MINUS_ON // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS`
    static let hyphenToMinusOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_HYPHEN_TO_MINUS_OFF // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS`
    static let asteriskToMultiplyOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_ASTERISK_TO_MULTIPLY_ON // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS`
    static let asteriskToMultiplyOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_ASTERISK_TO_MULTIPLY_OFF // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS`
    static let slashToDivideOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASH_TO_DIVIDE_ON // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS`
    static let slashToDivideOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_SLASH_TO_DIVIDE_OFF // 5

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS`
    static let inequalityLigaturesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_INEQUALITY_LIGATURES_ON // 6

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS`
    static let inequalityLigaturesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_INEQUALITY_LIGATURES_OFF // 7

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS`
    static let exponentsOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPONENTS_ON // 8

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS`
    static let exponentsOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPONENTS_OFF // 9

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS`
    static let mathematicalGreekOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_ON // 10

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS`
    static let mathematicalGreekOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_MATHEMATICAL_GREEK_OFF // 11

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE`
    static let noOrnaments = HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ORNAMENTS // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE`
    static let dingbats = HB_AAT_LAYOUT_FEATURE_SELECTOR_DINGBATS // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE`
    static let piCharacters = HB_AAT_LAYOUT_FEATURE_SELECTOR_PI_CHARACTERS // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE`
    static let fleurons = HB_AAT_LAYOUT_FEATURE_SELECTOR_FLEURONS // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE`
    static let decorativeBorders = HB_AAT_LAYOUT_FEATURE_SELECTOR_DECORATIVE_BORDERS // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE`
    static let internationalSymbols = HB_AAT_LAYOUT_FEATURE_SELECTOR_INTERNATIONAL_SYMBOLS // 5

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE`
    static let mathSymbols = HB_AAT_LAYOUT_FEATURE_SELECTOR_MATH_SYMBOLS // 6

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_ALTERNATIVES`
    static let noAlternates = HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ALTERNATES // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE`
    static let designLevel1 = HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL1 // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE`
    static let designLevel2 = HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL2 // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE`
    static let designLevel3 = HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL3 // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE`
    static let designLevel4 = HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL4 // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE`
    static let designLevel5 = HB_AAT_LAYOUT_FEATURE_SELECTOR_DESIGN_LEVEL5 // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS`
    static let noStyleOptions = HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_STYLE_OPTIONS // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS`
    static let displayText = HB_AAT_LAYOUT_FEATURE_SELECTOR_DISPLAY_TEXT // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS`
    static let engravedText = HB_AAT_LAYOUT_FEATURE_SELECTOR_ENGRAVED_TEXT // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS`
    static let illuminatedCaps = HB_AAT_LAYOUT_FEATURE_SELECTOR_ILLUMINATED_CAPS // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS`
    static let titlingCaps = HB_AAT_LAYOUT_FEATURE_SELECTOR_TITLING_CAPS // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS`
    static let tallCaps = HB_AAT_LAYOUT_FEATURE_SELECTOR_TALL_CAPS // 5

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE`
    static let traditionalCharacters = HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_CHARACTERS // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE`
    static let simplifiedCharacters = HB_AAT_LAYOUT_FEATURE_SELECTOR_SIMPLIFIED_CHARACTERS // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE`
    static let jis1978Characters = HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1978_CHARACTERS // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE`
    static let jis1983Characters = HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1983_CHARACTERS // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE`
    static let jis1990Characters = HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS1990_CHARACTERS // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE`
    static let traditionalAltOne = HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_ONE // 5

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE`
    static let traditionalAltTwo = HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_TWO // 6

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE`
    static let traditionalAltThree = HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_THREE // 7

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE`
    static let traditionalAltFour = HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_FOUR // 8

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE`
    static let traditionalAltFive = HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_ALT_FIVE // 9

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE`
    static let expertCharacters = HB_AAT_LAYOUT_FEATURE_SELECTOR_EXPERT_CHARACTERS // 10

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE`
    static let jis2004Characters = HB_AAT_LAYOUT_FEATURE_SELECTOR_JIS2004_CHARACTERS // 11

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE`
    static let hojoCharacters = HB_AAT_LAYOUT_FEATURE_SELECTOR_HOJO_CHARACTERS // 12

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE`
    static let nlccharacters = HB_AAT_LAYOUT_FEATURE_SELECTOR_NLCCHARACTERS // 13

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE`
    static let traditionalNamesCharacters = HB_AAT_LAYOUT_FEATURE_SELECTOR_TRADITIONAL_NAMES_CHARACTERS // 14

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE`
    static let lowerCaseNumbers = HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_NUMBERS // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE`
    static let upperCaseNumbers = HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_NUMBERS // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING`
    static let proportionalText = HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_TEXT // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING`
    static let monospacedText = HB_AAT_LAYOUT_FEATURE_SELECTOR_MONOSPACED_TEXT // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING`
    static let halfWidthText = HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_TEXT // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING`
    static let thirdWidthText = HB_AAT_LAYOUT_FEATURE_SELECTOR_THIRD_WIDTH_TEXT // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING`
    static let quarterWidthText = HB_AAT_LAYOUT_FEATURE_SELECTOR_QUARTER_WIDTH_TEXT // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING`
    static let altProportionalText = HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_PROPORTIONAL_TEXT // 5

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING`
    static let altHalfWidthText = HB_AAT_LAYOUT_FEATURE_SELECTOR_ALT_HALF_WIDTH_TEXT // 6

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION`
    static let noTransliteration = HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_TRANSLITERATION // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION`
    static let hanjaToHangul = HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION`
    static let hiraganaToKatakana = HB_AAT_LAYOUT_FEATURE_SELECTOR_HIRAGANA_TO_KATAKANA // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION`
    static let katakanaToHiragana = HB_AAT_LAYOUT_FEATURE_SELECTOR_KATAKANA_TO_HIRAGANA // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION`
    static let kanaToRomanization = HB_AAT_LAYOUT_FEATURE_SELECTOR_KANA_TO_ROMANIZATION // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION`
    static let romanizationToHiragana = HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMANIZATION_TO_HIRAGANA // 5

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION`
    static let romanizationToKatakana = HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMANIZATION_TO_KATAKANA // 6

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION`
    static let hanjaToHangulAltOne = HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_ONE // 7

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION`
    static let hanjaToHangulAltTwo = HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_TWO // 8

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION`
    static let hanjaToHangulAltThree = HB_AAT_LAYOUT_FEATURE_SELECTOR_HANJA_TO_HANGUL_ALT_THREE // 9

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE`
    static let noAnnotation = HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_ANNOTATION // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE`
    static let boxAnnotation = HB_AAT_LAYOUT_FEATURE_SELECTOR_BOX_ANNOTATION // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE`
    static let roundedBoxAnnotation = HB_AAT_LAYOUT_FEATURE_SELECTOR_ROUNDED_BOX_ANNOTATION // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE`
    static let circleAnnotation = HB_AAT_LAYOUT_FEATURE_SELECTOR_CIRCLE_ANNOTATION // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE`
    static let invertedCircleAnnotation = HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_CIRCLE_ANNOTATION // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE`
    static let parenthesisAnnotation = HB_AAT_LAYOUT_FEATURE_SELECTOR_PARENTHESIS_ANNOTATION // 5

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE`
    static let periodAnnotation = HB_AAT_LAYOUT_FEATURE_SELECTOR_PERIOD_ANNOTATION // 6

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE`
    static let romanNumeralAnnotation = HB_AAT_LAYOUT_FEATURE_SELECTOR_ROMAN_NUMERAL_ANNOTATION // 7

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE`
    static let diamondAnnotation = HB_AAT_LAYOUT_FEATURE_SELECTOR_DIAMOND_ANNOTATION // 8

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE`
    static let invertedBoxAnnotation = HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_BOX_ANNOTATION // 9

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE`
    static let invertedRoundedBoxAnnotation = HB_AAT_LAYOUT_FEATURE_SELECTOR_INVERTED_ROUNDED_BOX_ANNOTATION // 10

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE`
    static let fullWidthKana = HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_KANA // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE`
    static let proportionalKana = HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_KANA // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE`
    static let fullWidthIdeographs = HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_IDEOGRAPHS // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE`
    static let proportionalIdeographs = HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_IDEOGRAPHS // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE`
    static let halfWidthIdeographs = HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_IDEOGRAPHS // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE`
    static let canonicalCompositionOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_CANONICAL_COMPOSITION_ON // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE`
    static let canonicalCompositionOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_CANONICAL_COMPOSITION_OFF // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE`
    static let compatibilityCompositionOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_COMPATIBILITY_COMPOSITION_ON // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE`
    static let compatibilityCompositionOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_COMPATIBILITY_COMPOSITION_OFF // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE`
    static let transcodingCompositionOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_TRANSCODING_COMPOSITION_ON // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE`
    static let transcodingCompositionOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_TRANSCODING_COMPOSITION_OFF // 5

    /// Deprecated; use `HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_OFF` instead
    static let noRubyKana = HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_RUBY_KANA // 0

    /// Deprecated; use `HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_ON` instead
    static let rubyKana = HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA`
    static let rubyKanaOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_ON // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA`
    static let rubyKanaOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_RUBY_KANA_OFF // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE`
    static let noCjkSymbolAlternatives = HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_CJK_SYMBOL_ALTERNATIVES // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE`
    static let cjkSymbolAltOne = HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_ONE // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE`
    static let cjkSymbolAltTwo = HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_TWO // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE`
    static let cjkSymbolAltThree = HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_THREE // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE`
    static let cjkSymbolAltFour = HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_FOUR // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE`
    static let cjkSymbolAltFive = HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_SYMBOL_ALT_FIVE // 5

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE`
    static let noIdeographicAlternatives = HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_IDEOGRAPHIC_ALTERNATIVES // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE`
    static let ideographicAltOne = HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_ONE // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE`
    static let ideographicAltTwo = HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_TWO // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE`
    static let ideographicAltThree = HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_THREE // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE`
    static let ideographicAltFour = HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_FOUR // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE`
    static let ideographicAltFive = HB_AAT_LAYOUT_FEATURE_SELECTOR_IDEOGRAPHIC_ALT_FIVE // 5

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE`
    static let cjkVerticalRomanCentered = HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_VERTICAL_ROMAN_CENTERED // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE`
    static let cjkVerticalRomanHbaseline = HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_VERTICAL_ROMAN_HBASELINE // 1

    /// Deprecated; use `HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_OFF` instead
    static let noCjkItalicRoman = HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_CJK_ITALIC_ROMAN // 0

    /// Deprecated; use `HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_ON` instead
    static let cjkItalicRoman = HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN`
    static let cjkItalicRomanOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_ON // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN`
    static let cjkItalicRomanOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_CJK_ITALIC_ROMAN_OFF // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT`
    static let caseSensitiveLayoutOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_ON // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT`
    static let caseSensitiveLayoutOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_LAYOUT_OFF // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT`
    static let caseSensitiveSpacingOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_ON // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT`
    static let caseSensitiveSpacingOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_CASE_SENSITIVE_SPACING_OFF // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA`
    static let alternateHorizKanaOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_ON // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA`
    static let alternateHorizKanaOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_HORIZ_KANA_OFF // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA`
    static let alternateVertKanaOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_ON // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA`
    static let alternateVertKanaOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_ALTERNATE_VERT_KANA_OFF // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let noStylisticAlternates = HB_AAT_LAYOUT_FEATURE_SELECTOR_NO_STYLISTIC_ALTERNATES // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltOneOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_ON // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltOneOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ONE_OFF // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltTwoOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_ON // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltTwoOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWO_OFF // 5

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltThreeOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_ON // 6

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltThreeOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THREE_OFF // 7

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltFourOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_ON // 8

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltFourOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOUR_OFF // 9

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltFiveOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_ON // 10

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltFiveOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIVE_OFF // 11

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltSixOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_ON // 12

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltSixOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIX_OFF // 13

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltSevenOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_ON // 14

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltSevenOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVEN_OFF // 15

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltEightOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_ON // 16

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltEightOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHT_OFF // 17

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltNineOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_ON // 18

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltNineOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINE_OFF // 19

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltTenOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_ON // 20

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltTenOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TEN_OFF // 21

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltElevenOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_ON // 22

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltElevenOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_ELEVEN_OFF // 23

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltTwelveOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_ON // 24

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltTwelveOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWELVE_OFF // 25

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltThirteenOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_ON // 26

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltThirteenOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_THIRTEEN_OFF // 27

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltFourteenOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_ON // 28

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltFourteenOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FOURTEEN_OFF // 29

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltFifteenOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_ON // 30

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltFifteenOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_FIFTEEN_OFF // 31

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltSixteenOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_ON // 32

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltSixteenOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SIXTEEN_OFF // 33

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltSeventeenOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_ON // 34

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltSeventeenOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_SEVENTEEN_OFF // 35

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltEighteenOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_ON // 36

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltEighteenOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_EIGHTEEN_OFF // 37

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltNineteenOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_ON // 38

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltNineteenOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_NINETEEN_OFF // 39

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltTwentyOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_ON // 40

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES`
    static let stylisticAltTwentyOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_STYLISTIC_ALT_TWENTY_OFF // 41

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES`
    static let contextualAlternatesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_ON // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES`
    static let contextualAlternatesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_ALTERNATES_OFF // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES`
    static let swashAlternatesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_ON // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES`
    static let swashAlternatesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_SWASH_ALTERNATES_OFF // 3

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES`
    static let contextualSwashAlternatesOn = HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_ON // 4

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES`
    static let contextualSwashAlternatesOff = HB_AAT_LAYOUT_FEATURE_SELECTOR_CONTEXTUAL_SWASH_ALTERNATES_OFF // 5

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE`
    static let defaultLowerCase = HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_LOWER_CASE // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE`
    static let lowerCaseSmallCaps = HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_SMALL_CAPS // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE`
    static let lowerCasePetiteCaps = HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_PETITE_CAPS // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE`
    static let defaultUpperCase = HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_UPPER_CASE // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE`
    static let upperCaseSmallCaps = HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_SMALL_CAPS // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE`
    static let upperCasePetiteCaps = HB_AAT_LAYOUT_FEATURE_SELECTOR_UPPER_CASE_PETITE_CAPS // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE`
    static let halfWidthCjkRoman = HB_AAT_LAYOUT_FEATURE_SELECTOR_HALF_WIDTH_CJK_ROMAN // 0

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE`
    static let proportionalCjkRoman = HB_AAT_LAYOUT_FEATURE_SELECTOR_PROPORTIONAL_CJK_ROMAN // 1

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE`
    static let defaultCjkRoman = HB_AAT_LAYOUT_FEATURE_SELECTOR_DEFAULT_CJK_ROMAN // 2

    /// for `HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE`
    static let fullWidthCjkRoman = HB_AAT_LAYOUT_FEATURE_SELECTOR_FULL_WIDTH_CJK_ROMAN // 3

}



/// The possible feature types defined for AAT shaping, from Apple [Font Feature Registry](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html).
public typealias aat_layout_feature_type_t = hb_aat_layout_feature_type_t


public extension aat_layout_feature_type_t {
    /// Cast constructor, converting any binary integer to a
    /// `aat_layout_feature_type_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castToaat_layout_feature_type_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castToaat_layout_feature_type_tInt(raw))
    }
    /// Initial, unset feature type
    static let invalid = HB_AAT_LAYOUT_FEATURE_TYPE_INVALID // 65535

    /// [All Typographic Features](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type0`)
    static let allTypographic = HB_AAT_LAYOUT_FEATURE_TYPE_ALL_TYPOGRAPHIC // 0

    /// [Ligatures](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type1`)
    static let ligatures = HB_AAT_LAYOUT_FEATURE_TYPE_LIGATURES // 1

    /// [Cursive Connection](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type2`)
    static let curisveConnection = HB_AAT_LAYOUT_FEATURE_TYPE_CURISVE_CONNECTION // 2

    /// [Letter Case](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type3`)
    static let letterCase = HB_AAT_LAYOUT_FEATURE_TYPE_LETTER_CASE // 3

    /// [Vertical Substitution](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type4`)
    static let verticalSubstitution = HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_SUBSTITUTION // 4

    /// [Linguistic Rearrangement](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type5`)
    static let linguisticRearrangement = HB_AAT_LAYOUT_FEATURE_TYPE_LINGUISTIC_REARRANGEMENT // 5

    /// [Number Spacing](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type6`)
    static let numberSpacing = HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_SPACING // 6

    /// [Smart Swash](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type8`)
    static let smartSwashType = HB_AAT_LAYOUT_FEATURE_TYPE_SMART_SWASH_TYPE // 8

    /// [Diacritics](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type9`)
    static let diacriticsType = HB_AAT_LAYOUT_FEATURE_TYPE_DIACRITICS_TYPE // 9

    /// [Vertical Position](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type10`)
    static let verticalPosition = HB_AAT_LAYOUT_FEATURE_TYPE_VERTICAL_POSITION // 10

    /// [Fractions](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type11`)
    static let fractions = HB_AAT_LAYOUT_FEATURE_TYPE_FRACTIONS // 11

    /// [Overlapping Characters](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type13`)
    static let overlappingCharactersType = HB_AAT_LAYOUT_FEATURE_TYPE_OVERLAPPING_CHARACTERS_TYPE // 13

    /// [Typographic Extras](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type14`)
    static let typographicExtras = HB_AAT_LAYOUT_FEATURE_TYPE_TYPOGRAPHIC_EXTRAS // 14

    /// [Mathematical Extras](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type15`)
    static let mathematicalExtras = HB_AAT_LAYOUT_FEATURE_TYPE_MATHEMATICAL_EXTRAS // 15

    /// [Ornament Sets](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type16`)
    static let ornamentSetsType = HB_AAT_LAYOUT_FEATURE_TYPE_ORNAMENT_SETS_TYPE // 16

    /// [Character Alternatives](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type17`)
    static let characterAlternatives = HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_ALTERNATIVES // 17

    /// [Design Complexity](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type18`)
    static let designComplexityType = HB_AAT_LAYOUT_FEATURE_TYPE_DESIGN_COMPLEXITY_TYPE // 18

    /// [Style Options](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type19`)
    static let styleOptions = HB_AAT_LAYOUT_FEATURE_TYPE_STYLE_OPTIONS // 19

    /// [Character Shape](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type20`)
    static let characterShape = HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_SHAPE // 20

    /// [Number Case](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type21`)
    static let numberCase = HB_AAT_LAYOUT_FEATURE_TYPE_NUMBER_CASE // 21

    /// [Text Spacing](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type22`)
    static let textSpacing = HB_AAT_LAYOUT_FEATURE_TYPE_TEXT_SPACING // 22

    /// [Transliteration](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type23`)
    static let transliteration = HB_AAT_LAYOUT_FEATURE_TYPE_TRANSLITERATION // 23

    /// [Annotation](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type24`)
    static let annotationType = HB_AAT_LAYOUT_FEATURE_TYPE_ANNOTATION_TYPE // 24

    /// [Kana Spacing](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type25`)
    static let kanaSpacingType = HB_AAT_LAYOUT_FEATURE_TYPE_KANA_SPACING_TYPE // 25

    /// [Ideographic Spacing](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type26`)
    static let ideographicSpacingType = HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_SPACING_TYPE // 26

    /// [Unicode Decomposition](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type27`)
    static let unicodeDecompositionType = HB_AAT_LAYOUT_FEATURE_TYPE_UNICODE_DECOMPOSITION_TYPE // 27

    /// [Ruby Kana](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type28`)
    static let rubyKana = HB_AAT_LAYOUT_FEATURE_TYPE_RUBY_KANA // 28

    /// [CJK Symbol Alternatives](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type29`)
    static let cjkSymbolAlternativesType = HB_AAT_LAYOUT_FEATURE_TYPE_CJK_SYMBOL_ALTERNATIVES_TYPE // 29

    /// [Ideographic Alternatives](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type30`)
    static let ideographicAlternativesType = HB_AAT_LAYOUT_FEATURE_TYPE_IDEOGRAPHIC_ALTERNATIVES_TYPE // 30

    /// [CJK Vertical Roman Placement](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type31`)
    static let cjkVerticalRomanPlacementType = HB_AAT_LAYOUT_FEATURE_TYPE_CJK_VERTICAL_ROMAN_PLACEMENT_TYPE // 31

    /// [Italic CJK Roman](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type32`)
    static let italicCjkRoman = HB_AAT_LAYOUT_FEATURE_TYPE_ITALIC_CJK_ROMAN // 32

    /// [Case Sensitive Layout](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type33`)
    static let caseSensitiveLayout = HB_AAT_LAYOUT_FEATURE_TYPE_CASE_SENSITIVE_LAYOUT // 33

    /// [Alternate Kana](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type34`)
    static let alternateKana = HB_AAT_LAYOUT_FEATURE_TYPE_ALTERNATE_KANA // 34

    /// [Stylistic Alternatives](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type35`)
    static let stylisticAlternatives = HB_AAT_LAYOUT_FEATURE_TYPE_STYLISTIC_ALTERNATIVES // 35

    /// [Contextual Alternatives](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type36`)
    static let contextualAlternatives = HB_AAT_LAYOUT_FEATURE_TYPE_CONTEXTUAL_ALTERNATIVES // 36

    /// [Lower Case](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type37`)
    static let lowerCase = HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE // 37

    /// [Upper Case](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type38`)
    static let upperCase = HB_AAT_LAYOUT_FEATURE_TYPE_UPPER_CASE // 38

    /// [Language Tag](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type39`)
    static let languageTagType = HB_AAT_LAYOUT_FEATURE_TYPE_LANGUAGE_TAG_TYPE // 39

    /// [CJK Roman Spacing](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html`Type103`)
    static let cjkRomanSpacingType = HB_AAT_LAYOUT_FEATURE_TYPE_CJK_ROMAN_SPACING_TYPE // 103

}



/// Data type for holding HarfBuzz's clustering behavior options. The cluster level
/// dictates one aspect of how HarfBuzz will treat non-base characters
/// during shaping.
/// 
/// In `HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES`, non-base
/// characters are merged into the cluster of the base character that precedes them.
/// 
/// In `HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS`, non-base characters are initially
/// assigned their own cluster values, which are not merged into preceding base
/// clusters. This allows HarfBuzz to perform additional operations like reorder
/// sequences of adjacent marks.
/// 
/// `HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES` is the default, because it maintains
/// backward compatibility with older versions of HarfBuzz. New client programs that
/// do not need to maintain such backward compatibility are recommended to use
/// `HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS` instead of the default.
public typealias buffer_cluster_level_t = hb_buffer_cluster_level_t


public extension buffer_cluster_level_t {
    /// Cast constructor, converting any binary integer to a
    /// `buffer_cluster_level_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castTobuffer_cluster_level_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castTobuffer_cluster_level_tInt(raw))
    }
    /// Return cluster values grouped by graphemes into
    ///   monotone order.
    static let monotoneGraphemes = HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES // 0

    /// Return cluster values grouped into monotone order.
    static let monotoneCharacters = HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS // 1

    /// Don't group cluster values.
    static let characters = HB_BUFFER_CLUSTER_LEVEL_CHARACTERS // 2

    /// Default cluster level,
    ///   equal to `HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES`.
    static let `default` = HB_BUFFER_CLUSTER_LEVEL_DEFAULT // 0

}



/// The type of `hb_buffer_t` contents.
public typealias buffer_content_type_t = hb_buffer_content_type_t


public extension buffer_content_type_t {
    /// Cast constructor, converting any binary integer to a
    /// `buffer_content_type_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castTobuffer_content_type_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castTobuffer_content_type_tInt(raw))
    }
    /// Initial value for new buffer.
    static let invalid = HB_BUFFER_CONTENT_TYPE_INVALID // 0

    /// The buffer contains input characters (before shaping).
    static let unicode = HB_BUFFER_CONTENT_TYPE_UNICODE // 1

    /// The buffer contains output glyphs (after shaping).
    static let glyphs = HB_BUFFER_CONTENT_TYPE_GLYPHS // 2

}



/// The buffer serialization and de-serialization format used in
/// `hb_buffer_serialize_glyphs()` and `hb_buffer_deserialize_glyphs()`.
public typealias buffer_serialize_format_t = hb_buffer_serialize_format_t


public extension buffer_serialize_format_t {
    /// Cast constructor, converting any binary integer to a
    /// `buffer_serialize_format_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castTobuffer_serialize_format_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castTobuffer_serialize_format_tInt(raw))
    }
    /// a human-readable, plain text format.
    static let text = HB_BUFFER_SERIALIZE_FORMAT_TEXT // 1413830740

    /// a machine-readable JSON format.
    static let json = HB_BUFFER_SERIALIZE_FORMAT_JSON // 1246973774

    /// invalid format.
    static let invalid = HB_BUFFER_SERIALIZE_FORMAT_INVALID // 0

}



/// The direction of a text segment or buffer.
/// 
/// A segment can also be tested for horizontal or vertical
/// orientation (irrespective of specific direction) with
/// `HB_DIRECTION_IS_HORIZONTAL()` or `HB_DIRECTION_IS_VERTICAL()`.
public typealias direction_t = hb_direction_t


public extension direction_t {
    /// Cast constructor, converting any binary integer to a
    /// `direction_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castTodirection_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castTodirection_tInt(raw))
    }
    /// Initial, unset direction.
    static let invalid = HB_DIRECTION_INVALID // 0

    /// Text is set horizontally from left to right.
    static let ltr = HB_DIRECTION_LTR // 4

    /// Text is set horizontally from right to left.
    static let rtl = HB_DIRECTION_RTL // 5

    /// Text is set vertically from top to bottom.
    static let ttb = HB_DIRECTION_TTB // 6

    /// Text is set vertically from bottom to top.
    static let btt = HB_DIRECTION_BTT // 7

}



/// Data type holding the memory modes available to
/// client programs.
/// 
/// Regarding these various memory-modes:
/// 
/// - In no case shall the HarfBuzz client modify memory
///   that is passed to HarfBuzz in a blob.  If there is
///   any such possibility, `HB_MEMORY_MODE_DUPLICATE` should be used
///   such that HarfBuzz makes a copy immediately,
/// 
/// - Use `HB_MEMORY_MODE_READONLY` otherwise, unless you really really
///   really know what you are doing,
/// 
/// - `HB_MEMORY_MODE_WRITABLE` is appropriate if you really made a
///   copy of data solely for the purpose of passing to
///   HarfBuzz and doing that just once (no reuse!),
/// 
/// - If the font is `mmap()`ed, it's okay to use
///   `HB_MEMORY_READONLY_MAY_MAKE_WRITABLE`, however, using that mode
///   correctly is very tricky.  Use `HB_MEMORY_MODE_READONLY` instead.
public typealias memory_mode_t = hb_memory_mode_t


public extension memory_mode_t {
    /// Cast constructor, converting any binary integer to a
    /// `memory_mode_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castTomemory_mode_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castTomemory_mode_tInt(raw))
    }
    /// HarfBuzz immediately makes a copy of the data.
    static let duplicate = HB_MEMORY_MODE_DUPLICATE // 0

    /// HarfBuzz client will never modify the data,
    ///     and HarfBuzz will never modify the data.
    static let readonly = HB_MEMORY_MODE_READONLY // 1

    /// HarfBuzz client made a copy of the data solely
    ///     for HarfBuzz, so HarfBuzz may modify the data.
    static let writable = HB_MEMORY_MODE_WRITABLE // 2

    /// See above
    static let readonlyMayMakeWritable = HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE // 3

}



/// Baseline tags from [Baseline Tags](https://docs.microsoft.com/en-us/typography/opentype/spec/baselinetags) registry.
public typealias ot_layout_baseline_tag_t = hb_ot_layout_baseline_tag_t


public extension ot_layout_baseline_tag_t {
    /// Cast constructor, converting any binary integer to a
    /// `ot_layout_baseline_tag_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castToot_layout_baseline_tag_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castToot_layout_baseline_tag_tInt(raw))
    }
    /// The baseline used by alphabetic scripts such as Latin, Cyrillic and Greek.
    /// In vertical writing mode, the alphabetic baseline for characters rotated 90 degrees clockwise.
    /// (This would not apply to alphabetic characters that remain upright in vertical writing mode, since these
    /// characters are not rotated.)
    static let roman = HB_OT_LAYOUT_BASELINE_TAG_ROMAN // 1919905134

    /// The hanging baseline. In horizontal direction, this is the horizontal
    /// line from which syllables seem, to hang in Tibetan and other similar scripts. In vertical writing mode,
    /// for Tibetan (or some other similar script) characters rotated 90 degrees clockwise.
    static let hanging = HB_OT_LAYOUT_BASELINE_TAG_HANGING // 1751215719

    /// Ideographic character face bottom or left edge,
    /// if the direction is horizontal or vertical, respectively.
    static let ideoFaceBottomOrLeft = HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_BOTTOM_OR_LEFT // 1768121954

    /// Ideographic character face top or right edge,
    /// if the direction is horizontal or vertical, respectively.
    static let ideoFaceTopOrRight = HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_TOP_OR_RIGHT // 1768121972

    /// The center of the ideographic character face. Since: 4.0.0
    static let ideoFaceCentral = HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_CENTRAL // 1231251043

    /// Ideographic em-box bottom or left edge,
    /// if the direction is horizontal or vertical, respectively.
    static let ideoEmboxBottomOrLeft = HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_BOTTOM_OR_LEFT // 1768187247

    /// Ideographic em-box top or right edge baseline,
    static let ideoEmboxTopOrRight = HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_TOP_OR_RIGHT // 1768191088

    /// The center of the ideographic em-box. Since: 4.0.0
    /// if the direction is horizontal or vertical, respectively.
    static let ideoEmboxCentral = HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_CENTRAL // 1231315813

    /// The baseline about which mathematical characters are centered.
    /// In vertical writing mode when mathematical characters rotated 90 degrees clockwise, are centered.
    static let math = HB_OT_LAYOUT_BASELINE_TAG_MATH // 1835103336

}



/// The GDEF classes defined for glyphs.
public typealias ot_layout_glyph_class_t = hb_ot_layout_glyph_class_t


public extension ot_layout_glyph_class_t {
    /// Cast constructor, converting any binary integer to a
    /// `ot_layout_glyph_class_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castToot_layout_glyph_class_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castToot_layout_glyph_class_tInt(raw))
    }
    /// Glyphs not matching the other classifications
    static let unclassified = HB_OT_LAYOUT_GLYPH_CLASS_UNCLASSIFIED // 0

    /// Spacing, single characters, capable of accepting marks
    static let baseGlyph = HB_OT_LAYOUT_GLYPH_CLASS_BASE_GLYPH // 1

    /// Glyphs that represent ligation of multiple characters
    static let ligature = HB_OT_LAYOUT_GLYPH_CLASS_LIGATURE // 2

    /// Non-spacing, combining glyphs that represent marks
    static let mark = HB_OT_LAYOUT_GLYPH_CLASS_MARK // 3

    /// Spacing glyphs that represent part of a single character
    static let component = HB_OT_LAYOUT_GLYPH_CLASS_COMPONENT // 4

}



/// The 'MATH' table constants, refer to
/// [OpenType documentation](https://docs.microsoft.com/en-us/typography/opentype/spec/math`mathconstants-table`)
/// For more explanations.
public typealias ot_math_constant_t = hb_ot_math_constant_t


public extension ot_math_constant_t {
    /// Cast constructor, converting any binary integer to a
    /// `ot_math_constant_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castToot_math_constant_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castToot_math_constant_tInt(raw))
    }
    /// scriptPercentScaleDown
    static let scriptPercentScaleDown = HB_OT_MATH_CONSTANT_SCRIPT_PERCENT_SCALE_DOWN // 0

    /// scriptScriptPercentScaleDown
    static let scriptScriptPercentScaleDown = HB_OT_MATH_CONSTANT_SCRIPT_SCRIPT_PERCENT_SCALE_DOWN // 1

    /// delimitedSubFormulaMinHeight
    static let delimitedSubFormulaMinHeight = HB_OT_MATH_CONSTANT_DELIMITED_SUB_FORMULA_MIN_HEIGHT // 2

    /// displayOperatorMinHeight
    static let displayOperatorMinHeight = HB_OT_MATH_CONSTANT_DISPLAY_OPERATOR_MIN_HEIGHT // 3

    /// mathLeading
    static let mathLeading = HB_OT_MATH_CONSTANT_MATH_LEADING // 4

    /// axisHeight
    static let axisHeight = HB_OT_MATH_CONSTANT_AXIS_HEIGHT // 5

    /// accentBaseHeight
    static let accentBaseHeight = HB_OT_MATH_CONSTANT_ACCENT_BASE_HEIGHT // 6

    /// flattenedAccentBaseHeight
    static let flattenedAccentBaseHeight = HB_OT_MATH_CONSTANT_FLATTENED_ACCENT_BASE_HEIGHT // 7

    /// subscriptShiftDown
    static let subscriptShiftDown = HB_OT_MATH_CONSTANT_SUBSCRIPT_SHIFT_DOWN // 8

    /// subscriptTopMax
    static let subscriptTopMax = HB_OT_MATH_CONSTANT_SUBSCRIPT_TOP_MAX // 9

    /// subscriptBaselineDropMin
    static let subscriptBaselineDropMin = HB_OT_MATH_CONSTANT_SUBSCRIPT_BASELINE_DROP_MIN // 10

    /// superscriptShiftUp
    static let superscriptShiftUp = HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP // 11

    /// superscriptShiftUpCramped
    static let superscriptShiftUpCramped = HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP_CRAMPED // 12

    /// superscriptBottomMin
    static let superscriptBottomMin = HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MIN // 13

    /// superscriptBaselineDropMax
    static let superscriptBaselineDropMax = HB_OT_MATH_CONSTANT_SUPERSCRIPT_BASELINE_DROP_MAX // 14

    /// subSuperscriptGapMin
    static let subSuperscriptGapMin = HB_OT_MATH_CONSTANT_SUB_SUPERSCRIPT_GAP_MIN // 15

    /// superscriptBottomMaxWithSubscript
    static let superscriptBottomMaxWithSubscript = HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MAX_WITH_SUBSCRIPT // 16

    /// spaceAfterScript
    static let spaceAfterScript = HB_OT_MATH_CONSTANT_SPACE_AFTER_SCRIPT // 17

    /// upperLimitGapMin
    static let upperLimitGapMin = HB_OT_MATH_CONSTANT_UPPER_LIMIT_GAP_MIN // 18

    /// upperLimitBaselineRiseMin
    static let upperLimitBaselineRiseMin = HB_OT_MATH_CONSTANT_UPPER_LIMIT_BASELINE_RISE_MIN // 19

    /// lowerLimitGapMin
    static let lowerLimitGapMin = HB_OT_MATH_CONSTANT_LOWER_LIMIT_GAP_MIN // 20

    /// lowerLimitBaselineDropMin
    static let lowerLimitBaselineDropMin = HB_OT_MATH_CONSTANT_LOWER_LIMIT_BASELINE_DROP_MIN // 21

    /// stackTopShiftUp
    static let stackTopShiftUp = HB_OT_MATH_CONSTANT_STACK_TOP_SHIFT_UP // 22

    /// stackTopDisplayStyleShiftUp
    static let stackTopDisplayStyleShiftUp = HB_OT_MATH_CONSTANT_STACK_TOP_DISPLAY_STYLE_SHIFT_UP // 23

    /// stackBottomShiftDown
    static let stackBottomShiftDown = HB_OT_MATH_CONSTANT_STACK_BOTTOM_SHIFT_DOWN // 24

    /// stackBottomDisplayStyleShiftDown
    static let stackBottomDisplayStyleShiftDown = HB_OT_MATH_CONSTANT_STACK_BOTTOM_DISPLAY_STYLE_SHIFT_DOWN // 25

    /// stackGapMin
    static let stackGapMin = HB_OT_MATH_CONSTANT_STACK_GAP_MIN // 26

    /// stackDisplayStyleGapMin
    static let stackDisplayStyleGapMin = HB_OT_MATH_CONSTANT_STACK_DISPLAY_STYLE_GAP_MIN // 27

    /// stretchStackTopShiftUp
    static let stretchStackTopShiftUp = HB_OT_MATH_CONSTANT_STRETCH_STACK_TOP_SHIFT_UP // 28

    /// stretchStackBottomShiftDown
    static let stretchStackBottomShiftDown = HB_OT_MATH_CONSTANT_STRETCH_STACK_BOTTOM_SHIFT_DOWN // 29

    /// stretchStackGapAboveMin
    static let stretchStackGapAboveMin = HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_ABOVE_MIN // 30

    /// stretchStackGapBelowMin
    static let stretchStackGapBelowMin = HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_BELOW_MIN // 31

    /// fractionNumeratorShiftUp
    static let fractionNumeratorShiftUp = HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_SHIFT_UP // 32

    /// fractionNumeratorDisplayStyleShiftUp
    static let fractionNumeratorDisplayStyleShiftUp = HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_DISPLAY_STYLE_SHIFT_UP // 33

    /// fractionDenominatorShiftDown
    static let fractionDenominatorShiftDown = HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_SHIFT_DOWN // 34

    /// fractionDenominatorDisplayStyleShiftDown
    static let fractionDenominatorDisplayStyleShiftDown = HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_DISPLAY_STYLE_SHIFT_DOWN // 35

    /// fractionNumeratorGapMin
    static let fractionNumeratorGapMin = HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_GAP_MIN // 36

    /// fractionNumDisplayStyleGapMin
    static let fractionNumDisplayStyleGapMin = HB_OT_MATH_CONSTANT_FRACTION_NUM_DISPLAY_STYLE_GAP_MIN // 37

    /// fractionRuleThickness
    static let fractionRuleThickness = HB_OT_MATH_CONSTANT_FRACTION_RULE_THICKNESS // 38

    /// fractionDenominatorGapMin
    static let fractionDenominatorGapMin = HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_GAP_MIN // 39

    /// fractionDenomDisplayStyleGapMin
    static let fractionDenomDisplayStyleGapMin = HB_OT_MATH_CONSTANT_FRACTION_DENOM_DISPLAY_STYLE_GAP_MIN // 40

    /// skewedFractionHorizontalGap
    static let skewedFractionHorizontalGap = HB_OT_MATH_CONSTANT_SKEWED_FRACTION_HORIZONTAL_GAP // 41

    /// skewedFractionVerticalGap
    static let skewedFractionVerticalGap = HB_OT_MATH_CONSTANT_SKEWED_FRACTION_VERTICAL_GAP // 42

    /// overbarVerticalGap
    static let overbarVerticalGap = HB_OT_MATH_CONSTANT_OVERBAR_VERTICAL_GAP // 43

    /// overbarRuleThickness
    static let overbarRuleThickness = HB_OT_MATH_CONSTANT_OVERBAR_RULE_THICKNESS // 44

    /// overbarExtraAscender
    static let overbarExtraAscender = HB_OT_MATH_CONSTANT_OVERBAR_EXTRA_ASCENDER // 45

    /// underbarVerticalGap
    static let underbarVerticalGap = HB_OT_MATH_CONSTANT_UNDERBAR_VERTICAL_GAP // 46

    /// underbarRuleThickness
    static let underbarRuleThickness = HB_OT_MATH_CONSTANT_UNDERBAR_RULE_THICKNESS // 47

    /// underbarExtraDescender
    static let underbarExtraDescender = HB_OT_MATH_CONSTANT_UNDERBAR_EXTRA_DESCENDER // 48

    /// radicalVerticalGap
    static let radicalVerticalGap = HB_OT_MATH_CONSTANT_RADICAL_VERTICAL_GAP // 49

    /// radicalDisplayStyleVerticalGap
    static let radicalDisplayStyleVerticalGap = HB_OT_MATH_CONSTANT_RADICAL_DISPLAY_STYLE_VERTICAL_GAP // 50

    /// radicalRuleThickness
    static let radicalRuleThickness = HB_OT_MATH_CONSTANT_RADICAL_RULE_THICKNESS // 51

    /// radicalExtraAscender
    static let radicalExtraAscender = HB_OT_MATH_CONSTANT_RADICAL_EXTRA_ASCENDER // 52

    /// radicalKernBeforeDegree
    static let radicalKernBeforeDegree = HB_OT_MATH_CONSTANT_RADICAL_KERN_BEFORE_DEGREE // 53

    /// radicalKernAfterDegree
    static let radicalKernAfterDegree = HB_OT_MATH_CONSTANT_RADICAL_KERN_AFTER_DEGREE // 54

    /// radicalDegreeBottomRaisePercent
    static let radicalDegreeBottomRaisePercent = HB_OT_MATH_CONSTANT_RADICAL_DEGREE_BOTTOM_RAISE_PERCENT // 55

}



/// The math kerning-table types defined for the four corners
/// of a glyph.
public typealias ot_math_kern_t = hb_ot_math_kern_t


public extension ot_math_kern_t {
    /// Cast constructor, converting any binary integer to a
    /// `ot_math_kern_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castToot_math_kern_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castToot_math_kern_tInt(raw))
    }
    /// The top right corner of the glyph.
    static let topRight = HB_OT_MATH_KERN_TOP_RIGHT // 0

    /// The top left corner of the glyph.
    static let topLeft = HB_OT_MATH_KERN_TOP_LEFT // 1

    /// The bottom right corner of the glyph.
    static let bottomRight = HB_OT_MATH_KERN_BOTTOM_RIGHT // 2

    /// The bottom left corner of the glyph.
    static let bottomLeft = HB_OT_MATH_KERN_BOTTOM_LEFT // 3

}



/// Known metadata tags from https://docs.microsoft.com/en-us/typography/opentype/spec/meta
public typealias ot_meta_tag_t = hb_ot_meta_tag_t


public extension ot_meta_tag_t {
    /// Cast constructor, converting any binary integer to a
    /// `ot_meta_tag_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castToot_meta_tag_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castToot_meta_tag_tInt(raw))
    }
    /// Design languages. Text, using only
    /// Basic Latin (ASCII) characters. Indicates languages and/or scripts
    /// for the user audiences that the font was primarily designed for.
    static let designLanguages = HB_OT_META_TAG_DESIGN_LANGUAGES // 1684827751

    /// Supported languages. Text, using
    /// only Basic Latin (ASCII) characters. Indicates languages and/or scripts
    /// that the font is declared to be capable of supporting.
    static let supportedLanguages = HB_OT_META_TAG_SUPPORTED_LANGUAGES // 1936485991

}



/// Metric tags corresponding to [MVAR Value
/// Tags](https://docs.microsoft.com/en-us/typography/opentype/spec/mvar`value-tags`)
public typealias ot_metrics_tag_t = hb_ot_metrics_tag_t


public extension ot_metrics_tag_t {
    /// Cast constructor, converting any binary integer to a
    /// `ot_metrics_tag_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castToot_metrics_tag_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castToot_metrics_tag_tInt(raw))
    }
    /// horizontal ascender.
    static let horizontalAscender = HB_OT_METRICS_TAG_HORIZONTAL_ASCENDER // 1751216995

    /// horizontal descender.
    static let horizontalDescender = HB_OT_METRICS_TAG_HORIZONTAL_DESCENDER // 1751413603

    /// horizontal line gap.
    static let horizontalLineGap = HB_OT_METRICS_TAG_HORIZONTAL_LINE_GAP // 1751934832

    /// horizontal clipping ascent.
    static let horizontalClippingAscent = HB_OT_METRICS_TAG_HORIZONTAL_CLIPPING_ASCENT // 1751346273

    /// horizontal clipping descent.
    static let horizontalClippingDescent = HB_OT_METRICS_TAG_HORIZONTAL_CLIPPING_DESCENT // 1751346276

    /// vertical ascender.
    static let verticalAscender = HB_OT_METRICS_TAG_VERTICAL_ASCENDER // 1986098019

    /// vertical descender.
    static let verticalDescender = HB_OT_METRICS_TAG_VERTICAL_DESCENDER // 1986294627

    /// vertical line gap.
    static let verticalLineGap = HB_OT_METRICS_TAG_VERTICAL_LINE_GAP // 1986815856

    /// horizontal caret rise.
    static let horizontalCaretRise = HB_OT_METRICS_TAG_HORIZONTAL_CARET_RISE // 1751347827

    /// horizontal caret run.
    static let horizontalCaretRun = HB_OT_METRICS_TAG_HORIZONTAL_CARET_RUN // 1751347822

    /// horizontal caret offset.
    static let horizontalCaretOffset = HB_OT_METRICS_TAG_HORIZONTAL_CARET_OFFSET // 1751347046

    /// vertical caret rise.
    static let verticalCaretRise = HB_OT_METRICS_TAG_VERTICAL_CARET_RISE // 1986228851

    /// vertical caret run.
    static let verticalCaretRun = HB_OT_METRICS_TAG_VERTICAL_CARET_RUN // 1986228846

    /// vertical caret offset.
    static let verticalCaretOffset = HB_OT_METRICS_TAG_VERTICAL_CARET_OFFSET // 1986228070

    /// x height.
    static let xHeight = HB_OT_METRICS_TAG_X_HEIGHT // 2020108148

    /// cap height.
    static let capHeight = HB_OT_METRICS_TAG_CAP_HEIGHT // 1668311156

    /// subscript em x size.
    static let subscriptEmXSize = HB_OT_METRICS_TAG_SUBSCRIPT_EM_X_SIZE // 1935833203

    /// subscript em y size.
    static let subscriptEmYSize = HB_OT_METRICS_TAG_SUBSCRIPT_EM_Y_SIZE // 1935833459

    /// subscript em x offset.
    static let subscriptEmXOffset = HB_OT_METRICS_TAG_SUBSCRIPT_EM_X_OFFSET // 1935833199

    /// subscript em y offset.
    static let subscriptEmYOffset = HB_OT_METRICS_TAG_SUBSCRIPT_EM_Y_OFFSET // 1935833455

    /// superscript em x size.
    static let superscriptEmXSize = HB_OT_METRICS_TAG_SUPERSCRIPT_EM_X_SIZE // 1936750707

    /// superscript em y size.
    static let superscriptEmYSize = HB_OT_METRICS_TAG_SUPERSCRIPT_EM_Y_SIZE // 1936750963

    /// superscript em x offset.
    static let superscriptEmXOffset = HB_OT_METRICS_TAG_SUPERSCRIPT_EM_X_OFFSET // 1936750703

    /// superscript em y offset.
    static let superscriptEmYOffset = HB_OT_METRICS_TAG_SUPERSCRIPT_EM_Y_OFFSET // 1936750959

    /// strikeout size.
    static let strikeoutSize = HB_OT_METRICS_TAG_STRIKEOUT_SIZE // 1937011315

    /// strikeout offset.
    static let strikeoutOffset = HB_OT_METRICS_TAG_STRIKEOUT_OFFSET // 1937011311

    /// underline size.
    static let underlineSize = HB_OT_METRICS_TAG_UNDERLINE_SIZE // 1970168947

    /// underline offset.
    static let underlineOffset = HB_OT_METRICS_TAG_UNDERLINE_OFFSET // 1970168943

}



/// Data type for scripts. Each `hb_script_t`'s value is an `hb_tag_t` corresponding
/// to the four-letter values defined by [ISO 15924](https://unicode.org/iso15924/).
/// 
/// See also the Script (sc) property of the Unicode Character Database.
public typealias script_t = hb_script_t


public extension script_t {
    /// Cast constructor, converting any binary integer to a
    /// `script_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castToscript_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castToscript_tInt(raw))
    }
    /// `Zyyy`
    static let common = HB_SCRIPT_COMMON // 1517910393

    /// `Zinh`
    static let inherited = HB_SCRIPT_INHERITED // 1516858984

    /// `Zzzz`
    static let unknown = HB_SCRIPT_UNKNOWN // 1517976186

    /// `Arab`
    static let arabic = HB_SCRIPT_ARABIC // 1098015074

    /// `Armn`
    static let armenian = HB_SCRIPT_ARMENIAN // 1098018158

    /// `Beng`
    static let bengali = HB_SCRIPT_BENGALI // 1113943655

    /// `Cyrl`
    static let cyrillic = HB_SCRIPT_CYRILLIC // 1132032620

    /// `Deva`
    static let devanagari = HB_SCRIPT_DEVANAGARI // 1147500129

    /// `Geor`
    static let georgian = HB_SCRIPT_GEORGIAN // 1197830002

    /// `Grek`
    static let greek = HB_SCRIPT_GREEK // 1198679403

    /// `Gujr`
    static let gujarati = HB_SCRIPT_GUJARATI // 1198877298

    /// `Guru`
    static let gurmukhi = HB_SCRIPT_GURMUKHI // 1198879349

    /// `Hang`
    static let hangul = HB_SCRIPT_HANGUL // 1214344807

    /// `Hani`
    static let han = HB_SCRIPT_HAN // 1214344809

    /// `Hebr`
    static let hebrew = HB_SCRIPT_HEBREW // 1214603890

    /// `Hira`
    static let hiragana = HB_SCRIPT_HIRAGANA // 1214870113

    /// `Knda`
    static let kannada = HB_SCRIPT_KANNADA // 1265525857

    /// `Kana`
    static let katakana = HB_SCRIPT_KATAKANA // 1264676449

    /// `Laoo`
    static let lao = HB_SCRIPT_LAO // 1281453935

    /// `Latn`
    static let latin = HB_SCRIPT_LATIN // 1281455214

    /// `Mlym`
    static let malayalam = HB_SCRIPT_MALAYALAM // 1298954605

    /// `Orya`
    static let oriya = HB_SCRIPT_ORIYA // 1332902241

    /// `Taml`
    static let tamil = HB_SCRIPT_TAMIL // 1415671148

    /// `Telu`
    static let telugu = HB_SCRIPT_TELUGU // 1415933045

    /// `Thai`
    static let thai = HB_SCRIPT_THAI // 1416126825

    /// `Tibt`
    static let tibetan = HB_SCRIPT_TIBETAN // 1416192628

    /// `Bopo`
    static let bopomofo = HB_SCRIPT_BOPOMOFO // 1114599535

    /// `Brai`
    static let braille = HB_SCRIPT_BRAILLE // 1114792297

    /// `Cans`
    static let canadianSyllabics = HB_SCRIPT_CANADIAN_SYLLABICS // 1130458739

    /// `Cher`
    static let cherokee = HB_SCRIPT_CHEROKEE // 1130915186

    /// `Ethi`
    static let ethiopic = HB_SCRIPT_ETHIOPIC // 1165256809

    /// `Khmr`
    static let khmer = HB_SCRIPT_KHMER // 1265134962

    /// `Mong`
    static let mongolian = HB_SCRIPT_MONGOLIAN // 1299148391

    /// `Mymr`
    static let myanmar = HB_SCRIPT_MYANMAR // 1299803506

    /// `Ogam`
    static let ogham = HB_SCRIPT_OGHAM // 1332175213

    /// `Runr`
    static let runic = HB_SCRIPT_RUNIC // 1383427698

    /// `Sinh`
    static let sinhala = HB_SCRIPT_SINHALA // 1399418472

    /// `Syrc`
    static let syriac = HB_SCRIPT_SYRIAC // 1400468067

    /// `Thaa`
    static let thaana = HB_SCRIPT_THAANA // 1416126817

    /// `Yiii`
    static let yi = HB_SCRIPT_YI // 1500080489

    /// `Dsrt`
    static let deseret = HB_SCRIPT_DESERET // 1148416628

    /// `Goth`
    static let gothic = HB_SCRIPT_GOTHIC // 1198486632

    /// `Ital`
    static let oldItalic = HB_SCRIPT_OLD_ITALIC // 1232363884

    /// `Buhd`
    static let buhid = HB_SCRIPT_BUHID // 1114990692

    /// `Hano`
    static let hanunoo = HB_SCRIPT_HANUNOO // 1214344815

    /// `Tglg`
    static let tagalog = HB_SCRIPT_TAGALOG // 1416064103

    /// `Tagb`
    static let tagbanwa = HB_SCRIPT_TAGBANWA // 1415669602

    /// `Cprt`
    static let cypriot = HB_SCRIPT_CYPRIOT // 1131442804

    /// `Limb`
    static let limbu = HB_SCRIPT_LIMBU // 1281977698

    /// `Linb`
    static let linearB = HB_SCRIPT_LINEAR_B // 1281977954

    /// `Osma`
    static let osmanya = HB_SCRIPT_OSMANYA // 1332964705

    /// `Shaw`
    static let shavian = HB_SCRIPT_SHAVIAN // 1399349623

    /// `Tale`
    static let taiLe = HB_SCRIPT_TAI_LE // 1415670885

    /// `Ugar`
    static let ugaritic = HB_SCRIPT_UGARITIC // 1432838514

    /// `Bugi`
    static let buginese = HB_SCRIPT_BUGINESE // 1114990441

    /// `Copt`
    static let coptic = HB_SCRIPT_COPTIC // 1131376756

    /// `Glag`
    static let glagolitic = HB_SCRIPT_GLAGOLITIC // 1198285159

    /// `Khar`
    static let kharoshthi = HB_SCRIPT_KHAROSHTHI // 1265131890

    /// `Talu`
    static let newTaiLue = HB_SCRIPT_NEW_TAI_LUE // 1415670901

    /// `Xpeo`
    static let oldPersian = HB_SCRIPT_OLD_PERSIAN // 1483761007

    /// `Sylo`
    static let sylotiNagri = HB_SCRIPT_SYLOTI_NAGRI // 1400466543

    /// `Tfng`
    static let tifinagh = HB_SCRIPT_TIFINAGH // 1415999079

    /// `Bali`
    static let balinese = HB_SCRIPT_BALINESE // 1113681001

    /// `Xsux`
    static let cuneiform = HB_SCRIPT_CUNEIFORM // 1483961720

    /// `Nkoo`
    static let nko = HB_SCRIPT_NKO // 1315663727

    /// `Phag`
    static let phagsPa = HB_SCRIPT_PHAGS_PA // 1349017959

    /// `Phnx`
    static let phoenician = HB_SCRIPT_PHOENICIAN // 1349021304

    /// `Cari`
    static let carian = HB_SCRIPT_CARIAN // 1130459753

    /// `Cham`
    static let cham = HB_SCRIPT_CHAM // 1130914157

    /// `Kali`
    static let kayahLi = HB_SCRIPT_KAYAH_LI // 1264675945

    /// `Lepc`
    static let lepcha = HB_SCRIPT_LEPCHA // 1281716323

    /// `Lyci`
    static let lycian = HB_SCRIPT_LYCIAN // 1283023721

    /// `Lydi`
    static let lydian = HB_SCRIPT_LYDIAN // 1283023977

    /// `Olck`
    static let olChiki = HB_SCRIPT_OL_CHIKI // 1332503403

    /// `Rjng`
    static let rejang = HB_SCRIPT_REJANG // 1382706791

    /// `Saur`
    static let saurashtra = HB_SCRIPT_SAURASHTRA // 1398895986

    /// `Sund`
    static let sundanese = HB_SCRIPT_SUNDANESE // 1400204900

    /// `Vaii`
    static let vai = HB_SCRIPT_VAI // 1449224553

    /// `Avst`
    static let avestan = HB_SCRIPT_AVESTAN // 1098281844

    /// `Bamu`
    static let bamum = HB_SCRIPT_BAMUM // 1113681269

    /// `Egyp`
    static let egyptianHieroglyphs = HB_SCRIPT_EGYPTIAN_HIEROGLYPHS // 1164409200

    /// `Armi`
    static let imperialAramaic = HB_SCRIPT_IMPERIAL_ARAMAIC // 1098018153

    /// `Phli`
    static let inscriptionalPahlavi = HB_SCRIPT_INSCRIPTIONAL_PAHLAVI // 1349020777

    /// `Prti`
    static let inscriptionalParthian = HB_SCRIPT_INSCRIPTIONAL_PARTHIAN // 1349678185

    /// `Java`
    static let javanese = HB_SCRIPT_JAVANESE // 1247901281

    /// `Kthi`
    static let kaithi = HB_SCRIPT_KAITHI // 1265920105

    /// `Lisu`
    static let lisu = HB_SCRIPT_LISU // 1281979253

    /// `Mtei`
    static let meeteiMayek = HB_SCRIPT_MEETEI_MAYEK // 1299473769

    /// `Sarb`
    static let oldSouthArabian = HB_SCRIPT_OLD_SOUTH_ARABIAN // 1398895202

    /// `Orkh`
    static let oldTurkic = HB_SCRIPT_OLD_TURKIC // 1332898664

    /// `Samr`
    static let samaritan = HB_SCRIPT_SAMARITAN // 1398893938

    /// `Lana`
    static let taiTham = HB_SCRIPT_TAI_THAM // 1281453665

    /// `Tavt`
    static let taiViet = HB_SCRIPT_TAI_VIET // 1415673460

    /// `Batk`
    static let batak = HB_SCRIPT_BATAK // 1113683051

    /// `Brah`
    static let brahmi = HB_SCRIPT_BRAHMI // 1114792296

    /// `Mand`
    static let mandaic = HB_SCRIPT_MANDAIC // 1298230884

    /// `Cakm`
    static let chakma = HB_SCRIPT_CHAKMA // 1130457965

    /// `Merc`
    static let meroiticCursive = HB_SCRIPT_MEROITIC_CURSIVE // 1298494051

    /// `Mero`
    static let meroiticHieroglyphs = HB_SCRIPT_MEROITIC_HIEROGLYPHS // 1298494063

    /// `Plrd`
    static let miao = HB_SCRIPT_MIAO // 1349284452

    /// `Shrd`
    static let sharada = HB_SCRIPT_SHARADA // 1399353956

    /// `Sora`
    static let soraSompeng = HB_SCRIPT_SORA_SOMPENG // 1399812705

    /// `Takr`
    static let takri = HB_SCRIPT_TAKRI // 1415670642

    /// `Bass`, Since: 0.9.30
    static let bassaVah = HB_SCRIPT_BASSA_VAH // 1113682803

    /// `Aghb`, Since: 0.9.30
    static let caucasianAlbanian = HB_SCRIPT_CAUCASIAN_ALBANIAN // 1097295970

    /// `Dupl`, Since: 0.9.30
    static let duployan = HB_SCRIPT_DUPLOYAN // 1148547180

    /// `Elba`, Since: 0.9.30
    static let elbasan = HB_SCRIPT_ELBASAN // 1164730977

    /// `Gran`, Since: 0.9.30
    static let grantha = HB_SCRIPT_GRANTHA // 1198678382

    /// `Khoj`, Since: 0.9.30
    static let khojki = HB_SCRIPT_KHOJKI // 1265135466

    /// `Sind`, Since: 0.9.30
    static let khudawadi = HB_SCRIPT_KHUDAWADI // 1399418468

    /// `Lina`, Since: 0.9.30
    static let linearA = HB_SCRIPT_LINEAR_A // 1281977953

    /// `Mahj`, Since: 0.9.30
    static let mahajani = HB_SCRIPT_MAHAJANI // 1298229354

    /// `Mani`, Since: 0.9.30
    static let manichaean = HB_SCRIPT_MANICHAEAN // 1298230889

    /// `Mend`, Since: 0.9.30
    static let mendeKikakui = HB_SCRIPT_MENDE_KIKAKUI // 1298493028

    /// `Modi`, Since: 0.9.30
    static let modi = HB_SCRIPT_MODI // 1299145833

    /// `Mroo`, Since: 0.9.30
    static let mro = HB_SCRIPT_MRO // 1299345263

    /// `Nbat`, Since: 0.9.30
    static let nabataean = HB_SCRIPT_NABATAEAN // 1315070324

    /// `Narb`, Since: 0.9.30
    static let oldNorthArabian = HB_SCRIPT_OLD_NORTH_ARABIAN // 1315009122

    /// `Perm`, Since: 0.9.30
    static let oldPermic = HB_SCRIPT_OLD_PERMIC // 1348825709

    /// `Hmng`, Since: 0.9.30
    static let pahawhHmong = HB_SCRIPT_PAHAWH_HMONG // 1215131239

    /// `Palm`, Since: 0.9.30
    static let palmyrene = HB_SCRIPT_PALMYRENE // 1348562029

    /// `Pauc`, Since: 0.9.30
    static let pauCinHau = HB_SCRIPT_PAU_CIN_HAU // 1348564323

    /// `Phlp`, Since: 0.9.30
    static let psalterPahlavi = HB_SCRIPT_PSALTER_PAHLAVI // 1349020784

    /// `Sidd`, Since: 0.9.30
    static let siddham = HB_SCRIPT_SIDDHAM // 1399415908

    /// `Tirh`, Since: 0.9.30
    static let tirhuta = HB_SCRIPT_TIRHUTA // 1416196712

    /// `Wara`, Since: 0.9.30
    static let warangCiti = HB_SCRIPT_WARANG_CITI // 1466004065

    /// `Ahom`, Since: 0.9.30
    static let ahom = HB_SCRIPT_AHOM // 1097363309

    /// `Hluw`, Since: 0.9.30
    static let anatolianHieroglyphs = HB_SCRIPT_ANATOLIAN_HIEROGLYPHS // 1215067511

    /// `Hatr`, Since: 0.9.30
    static let hatran = HB_SCRIPT_HATRAN // 1214346354

    /// `Mult`, Since: 0.9.30
    static let multani = HB_SCRIPT_MULTANI // 1299541108

    /// `Hung`, Since: 0.9.30
    static let oldHungarian = HB_SCRIPT_OLD_HUNGARIAN // 1215655527

    /// `Sgnw`, Since: 0.9.30
    static let signwriting = HB_SCRIPT_SIGNWRITING // 1399287415

    /// `Adlm`, Since: 1.3.0
    static let adlam = HB_SCRIPT_ADLAM // 1097100397

    /// `Bhks`, Since: 1.3.0
    static let bhaiksuki = HB_SCRIPT_BHAIKSUKI // 1114139507

    /// `Marc`, Since: 1.3.0
    static let marchen = HB_SCRIPT_MARCHEN // 1298231907

    /// `Osge`, Since: 1.3.0
    static let osage = HB_SCRIPT_OSAGE // 1332963173

    /// `Tang`, Since: 1.3.0
    static let tangut = HB_SCRIPT_TANGUT // 1415671399

    /// `Newa`, Since: 1.3.0
    static let newa = HB_SCRIPT_NEWA // 1315272545

    /// `Gonm`, Since: 1.6.0
    static let masaramGondi = HB_SCRIPT_MASARAM_GONDI // 1198485101

    /// `Nshu`, Since: 1.6.0
    static let nushu = HB_SCRIPT_NUSHU // 1316186229

    /// `Soyo`, Since: 1.6.0
    static let soyombo = HB_SCRIPT_SOYOMBO // 1399814511

    /// `Zanb`, Since: 1.6.0
    static let zanabazarSquare = HB_SCRIPT_ZANABAZAR_SQUARE // 1516334690

    /// `Dogr`, Since: 1.8.0
    static let dogra = HB_SCRIPT_DOGRA // 1148151666

    /// `Gong`, Since: 1.8.0
    static let gunjalaGondi = HB_SCRIPT_GUNJALA_GONDI // 1198485095

    /// `Rohg`, Since: 1.8.0
    static let hanifiRohingya = HB_SCRIPT_HANIFI_ROHINGYA // 1383032935

    /// `Maka`, Since: 1.8.0
    static let makasar = HB_SCRIPT_MAKASAR // 1298230113

    /// `Medf`, Since: 1.8.0
    static let medefaidrin = HB_SCRIPT_MEDEFAIDRIN // 1298490470

    /// `Sogo`, Since: 1.8.0
    static let oldSogdian = HB_SCRIPT_OLD_SOGDIAN // 1399809903

    /// `Sogd`, Since: 1.8.0
    static let sogdian = HB_SCRIPT_SOGDIAN // 1399809892

    /// `Elym`, Since: 2.4.0
    static let elymaic = HB_SCRIPT_ELYMAIC // 1164736877

    /// `Nand`, Since: 2.4.0
    static let nandinagari = HB_SCRIPT_NANDINAGARI // 1315008100

    /// `Hmnp`, Since: 2.4.0
    static let nyiakengPuachueHmong = HB_SCRIPT_NYIAKENG_PUACHUE_HMONG // 1215131248

    /// `Wcho`, Since: 2.4.0
    static let wancho = HB_SCRIPT_WANCHO // 1466132591

    /// `Chrs`, Since: 2.6.7
    static let chorasmian = HB_SCRIPT_CHORASMIAN // 1130918515

    /// `Diak`, Since: 2.6.7
    static let divesAkuru = HB_SCRIPT_DIVES_AKURU // 1147756907

    /// `Kits`, Since: 2.6.7
    static let khitanSmallScript = HB_SCRIPT_KHITAN_SMALL_SCRIPT // 1265202291

    /// `Yezi`, Since: 2.6.7
    static let yezidi = HB_SCRIPT_YEZIDI // 1499822697

    /// `Cpmn`, Since: 3.0.0
    static let cyproMinoan = HB_SCRIPT_CYPRO_MINOAN // 1131441518

    /// `Ougr`, Since: 3.0.0
    static let oldUyghur = HB_SCRIPT_OLD_UYGHUR // 1333094258

    /// `Tnsa`, Since: 3.0.0
    static let tangsa = HB_SCRIPT_TANGSA // 1416524641

    /// `Toto`, Since: 3.0.0
    static let toto = HB_SCRIPT_TOTO // 1416590447

    /// `Vith`, Since: 3.0.0
    static let vithkuqi = HB_SCRIPT_VITHKUQI // 1449751656

    /// `Zmth`, Since: 3.4.0
    static let math = HB_SCRIPT_MATH // 1517122664

    /// `Kawi`, Since: 5.2.0
    static let kawi = HB_SCRIPT_KAWI // 1264678761

    /// `Nagm`, Since: 5.2.0
    static let nagMundari = HB_SCRIPT_NAG_MUNDARI // 1315006317

    /// No script set
    static let invalid = HB_SCRIPT_INVALID // 0

}



/// Defined by [OpenType Design-Variation Axis Tag Registry](https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg).
public typealias style_tag_t = hb_style_tag_t


public extension style_tag_t {
    /// Cast constructor, converting any binary integer to a
    /// `style_tag_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castTostyle_tag_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castTostyle_tag_tInt(raw))
    }
    /// Used to vary between non-italic and italic.
    /// A value of 0 can be interpreted as "Roman" (non-italic); a value of 1 can
    /// be interpreted as (fully) italic.
    static let italic = HB_STYLE_TAG_ITALIC // 1769234796

    /// Used to vary design to suit different text sizes.
    /// Non-zero. Values can be interpreted as text size, in points.
    static let opticalSize = HB_STYLE_TAG_OPTICAL_SIZE // 1869640570

    /// Used to vary between upright and slanted text. Values
    /// must be greater than -90 and less than +90. Values can be interpreted as
    /// the angle, in counter-clockwise degrees, of oblique slant from whatever the
    /// designer considers to be upright for that font design. Typical right-leaning
    /// Italic fonts have a negative slant angle (typically around -12)
    static let slantAngle = HB_STYLE_TAG_SLANT_ANGLE // 1936486004

    /// same as `HB_STYLE_TAG_SLANT_ANGLE` expression as ratio.
    /// Typical right-leaning Italic fonts have a positive slant ratio (typically around 0.2)
    static let slantRatio = HB_STYLE_TAG_SLANT_RATIO // 1399615092

    /// Used to vary width of text from narrower to wider.
    /// Non-zero. Values can be interpreted as a percentage of whatever the font
    /// designer considers “normal width” for that font design.
    static let width = HB_STYLE_TAG_WIDTH // 2003072104

    /// Used to vary stroke thicknesses or other design details
    /// to give variation from lighter to blacker. Values can be interpreted in direct
    /// comparison to values for usWeightClass in the OS/2 table,
    /// or the CSS font-weight property.
    static let weight = HB_STYLE_TAG_WEIGHT // 2003265652

}



/// Data type for the Canonical_Combining_Class (ccc) property
/// from the Unicode Character Database.
/// 
/// &lt;note&gt;Note: newer versions of Unicode may add new values.
/// Client programs should be ready to handle any value in the 0..254 range
/// being returned from `hb_unicode_combining_class()`.&lt;/note&gt;
public typealias unicode_combining_class_t = hb_unicode_combining_class_t


public extension unicode_combining_class_t {
    /// Cast constructor, converting any binary integer to a
    /// `unicode_combining_class_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castTounicode_combining_class_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castTounicode_combining_class_tInt(raw))
    }
    /// Spacing and enclosing marks; also many vowel and consonant signs, even if nonspacing
    static let notReordered = HB_UNICODE_COMBINING_CLASS_NOT_REORDERED // 0

    /// Marks which overlay a base letter or symbol
    static let overlay = HB_UNICODE_COMBINING_CLASS_OVERLAY // 1

    /// Diacritic nukta marks in Brahmi-derived scripts
    static let nukta = HB_UNICODE_COMBINING_CLASS_NUKTA // 7

    /// Hiragana/Katakana voicing marks
    static let kanaVoicing = HB_UNICODE_COMBINING_CLASS_KANA_VOICING // 8

    /// Viramas
    static let virama = HB_UNICODE_COMBINING_CLASS_VIRAMA // 9

    /// [Hebrew]
    static let ccc10 = HB_UNICODE_COMBINING_CLASS_CCC10 // 10

    /// [Hebrew]
    static let ccc11 = HB_UNICODE_COMBINING_CLASS_CCC11 // 11

    /// [Hebrew]
    static let ccc12 = HB_UNICODE_COMBINING_CLASS_CCC12 // 12

    /// [Hebrew]
    static let ccc13 = HB_UNICODE_COMBINING_CLASS_CCC13 // 13

    /// [Hebrew]
    static let ccc14 = HB_UNICODE_COMBINING_CLASS_CCC14 // 14

    /// [Hebrew]
    static let ccc15 = HB_UNICODE_COMBINING_CLASS_CCC15 // 15

    /// [Hebrew]
    static let ccc16 = HB_UNICODE_COMBINING_CLASS_CCC16 // 16

    /// [Hebrew]
    static let ccc17 = HB_UNICODE_COMBINING_CLASS_CCC17 // 17

    /// [Hebrew]
    static let ccc18 = HB_UNICODE_COMBINING_CLASS_CCC18 // 18

    /// [Hebrew]
    static let ccc19 = HB_UNICODE_COMBINING_CLASS_CCC19 // 19

    /// [Hebrew]
    static let ccc20 = HB_UNICODE_COMBINING_CLASS_CCC20 // 20

    /// [Hebrew]
    static let ccc21 = HB_UNICODE_COMBINING_CLASS_CCC21 // 21

    /// [Hebrew]
    static let ccc22 = HB_UNICODE_COMBINING_CLASS_CCC22 // 22

    /// [Hebrew]
    static let ccc23 = HB_UNICODE_COMBINING_CLASS_CCC23 // 23

    /// [Hebrew]
    static let ccc24 = HB_UNICODE_COMBINING_CLASS_CCC24 // 24

    /// [Hebrew]
    static let ccc25 = HB_UNICODE_COMBINING_CLASS_CCC25 // 25

    /// [Hebrew]
    static let ccc26 = HB_UNICODE_COMBINING_CLASS_CCC26 // 26

    /// [Arabic]
    static let ccc27 = HB_UNICODE_COMBINING_CLASS_CCC27 // 27

    /// [Arabic]
    static let ccc28 = HB_UNICODE_COMBINING_CLASS_CCC28 // 28

    /// [Arabic]
    static let ccc29 = HB_UNICODE_COMBINING_CLASS_CCC29 // 29

    /// [Arabic]
    static let ccc30 = HB_UNICODE_COMBINING_CLASS_CCC30 // 30

    /// [Arabic]
    static let ccc31 = HB_UNICODE_COMBINING_CLASS_CCC31 // 31

    /// [Arabic]
    static let ccc32 = HB_UNICODE_COMBINING_CLASS_CCC32 // 32

    /// [Arabic]
    static let ccc33 = HB_UNICODE_COMBINING_CLASS_CCC33 // 33

    /// [Arabic]
    static let ccc34 = HB_UNICODE_COMBINING_CLASS_CCC34 // 34

    /// [Arabic]
    static let ccc35 = HB_UNICODE_COMBINING_CLASS_CCC35 // 35

    /// [Syriac]
    static let ccc36 = HB_UNICODE_COMBINING_CLASS_CCC36 // 36

    /// [Telugu]
    static let ccc84 = HB_UNICODE_COMBINING_CLASS_CCC84 // 84

    /// [Telugu]
    static let ccc91 = HB_UNICODE_COMBINING_CLASS_CCC91 // 91

    /// [Thai]
    static let ccc103 = HB_UNICODE_COMBINING_CLASS_CCC103 // 103

    /// [Thai]
    static let ccc107 = HB_UNICODE_COMBINING_CLASS_CCC107 // 107

    /// [Lao]
    static let ccc118 = HB_UNICODE_COMBINING_CLASS_CCC118 // 118

    /// [Lao]
    static let ccc122 = HB_UNICODE_COMBINING_CLASS_CCC122 // 122

    /// [Tibetan]
    static let ccc129 = HB_UNICODE_COMBINING_CLASS_CCC129 // 129

    /// [Tibetan]
    static let ccc130 = HB_UNICODE_COMBINING_CLASS_CCC130 // 130

    /// [Tibetan]
    static let ccc133 = HB_UNICODE_COMBINING_CLASS_CCC133 // 132

    /// Marks attached at the bottom left
    static let attachedBelowLeft = HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT // 200

    /// Marks attached directly below
    static let attachedBelow = HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW // 202

    /// Marks attached directly above
    static let attachedAbove = HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE // 214

    /// Marks attached at the top right
    static let attachedAboveRight = HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT // 216

    /// Distinct marks at the bottom left
    static let belowLeft = HB_UNICODE_COMBINING_CLASS_BELOW_LEFT // 218

    /// Distinct marks directly below
    static let below = HB_UNICODE_COMBINING_CLASS_BELOW // 220

    /// Distinct marks at the bottom right
    static let belowRight = HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT // 222

    /// Distinct marks to the left
    static let `left` = HB_UNICODE_COMBINING_CLASS_LEFT // 224

    /// Distinct marks to the right
    static let `right` = HB_UNICODE_COMBINING_CLASS_RIGHT // 226

    /// Distinct marks at the top left
    static let aboveLeft = HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT // 228

    /// Distinct marks directly above
    static let above = HB_UNICODE_COMBINING_CLASS_ABOVE // 230

    /// Distinct marks at the top right
    static let aboveRight = HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT // 232

    /// Distinct marks subtending two bases
    static let doubleBelow = HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW // 233

    /// Distinct marks extending above two bases
    static let doubleAbove = HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE // 234

    /// Greek iota subscript only
    static let iotaSubscript = HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT // 240

    /// Invalid combining class
    static let invalid = HB_UNICODE_COMBINING_CLASS_INVALID // 255

}



/// Data type for the "General_Category" (gc) property from
/// the Unicode Character Database.
public typealias unicode_general_category_t = hb_unicode_general_category_t


public extension unicode_general_category_t {
    /// Cast constructor, converting any binary integer to a
    /// `unicode_general_category_t`.
    /// - Parameter raw: The raw integer value to initialise the enum from
    @inlinable init!<I: BinaryInteger>(_ raw: I) {
        func castTounicode_general_category_tInt<I: BinaryInteger, J: BinaryInteger>(_ param: I) -> J { J(param) }
        self.init(rawValue: castTounicode_general_category_tInt(raw))
    }
    /// [Cc]
    static let control = HB_UNICODE_GENERAL_CATEGORY_CONTROL // 0

    /// [Cf]
    static let format = HB_UNICODE_GENERAL_CATEGORY_FORMAT // 1

    /// [Cn]
    static let unassigned = HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED // 2

    /// [Co]
    static let privateUse = HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE // 3

    /// [Cs]
    static let surrogate = HB_UNICODE_GENERAL_CATEGORY_SURROGATE // 4

    /// [Ll]
    static let lowercaseLetter = HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER // 5

    /// [Lm]
    static let modifierLetter = HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER // 6

    /// [Lo]
    static let otherLetter = HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER // 7

    /// [Lt]
    static let titlecaseLetter = HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER // 8

    /// [Lu]
    static let uppercaseLetter = HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER // 9

    /// [Mc]
    static let spacingMark = HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK // 10

    /// [Me]
    static let enclosingMark = HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK // 11

    /// [Mn]
    static let nonSpacingMark = HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK // 12

    /// [Nd]
    static let decimalNumber = HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER // 13

    /// [Nl]
    static let letterNumber = HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER // 14

    /// [No]
    static let otherNumber = HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER // 15

    /// [Pc]
    static let connectPunctuation = HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION // 16

    /// [Pd]
    static let dashPunctuation = HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION // 17

    /// [Pe]
    static let closePunctuation = HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION // 18

    /// [Pf]
    static let finalPunctuation = HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION // 19

    /// [Pi]
    static let initialPunctuation = HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION // 20

    /// [Po]
    static let otherPunctuation = HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION // 21

    /// [Ps]
    static let openPunctuation = HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION // 22

    /// [Sc]
    static let currencySymbol = HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL // 23

    /// [Sk]
    static let modifierSymbol = HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL // 24

    /// [Sm]
    static let mathSymbol = HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL // 25

    /// [So]
    static let otherSymbol = HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL // 26

    /// [Zl]
    static let lineSeparator = HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR // 27

    /// [Zp]
    static let paragraphSeparator = HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR // 28

    /// [Zs]
    static let spaceSeparator = HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR // 29

}

